import pandas as pd

def get_main():
    data = pd.read_csv('Chronic_Disease_Indicators.csv')
    return data

def state_filter ():
  data = get_main()
  us_states = [
    'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida',
    'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine',
    'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska',
    'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio',
    'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas',
    'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'
  ]
  df = data[data['LocationDesc'].isin(us_states)]
  return df

def lack_of_insurance():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'Lack of health insurance among adults aged 18-64 years') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')
  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Question', 'DataValue', 'StratificationCategory1']]
  health_ins_bad = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  health_ins_good = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  return health_ins_bad, health_ins_good

def unable_to_pay():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2022) & \
              (df['Question'] == 'Unable to pay mortgage, rent, or utility bills in the past 12 months among adults') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Question', 'DataValue', 'StratificationCategory1']]
  rent_bad = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  rent_good = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  return rent_bad, rent_good

def lack_of_support():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2022) & \
              (df['Question'] == 'Lack of social and emotional support needed among adults') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Question', 'DataValue', 'StratificationCategory1']]
  support_bad = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  support_good = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  return support_bad, support_good

def reliable_transportation():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2022) & \
              (df['Question'] == 'Lack of reliable transportation in the past 12 months among adults') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Question', 'DataValue', 'StratificationCategory1']]
  transportation_bad = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  transportation_good = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  return transportation_bad, transportation_good

def food_insecure():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'Food insecure in the past 12 months among households') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Question', 'DataValue', 'StratificationCategory1']]
  insecure_bad = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  insecure_good = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  return insecure_bad, insecure_good

def internet_access():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'No broadband internet subscription among households') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Question', 'DataValue', 'StratificationCategory1']]
  internet_bad = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  internet_good = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  return internet_bad, internet_good

def ins_before_birth():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'Health insurance coverage in the month before pregnancy among women with a recent live birth') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Question', 'DataValue', 'StratificationCategory1']]
  live_birth_bad = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  live_birth_good = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  return live_birth_bad, live_birth_good

def ins_after_birth():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'Health insurance coverage after pregnancy among women with a recent live birth') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Question', 'DataValue', 'StratificationCategory1']]
  ins_after_birth_bad = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  ins_after_birth_good = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  return ins_after_birth_bad, ins_after_birth_good

def live_below_poverty():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'Living below 150% of the poverty threshold among all people') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Question', 'DataValue', 'StratificationCategory1']]
  below_poverty_bad = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  below_poverty_good = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  return below_poverty_bad, below_poverty_good

def well_visit():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'Routine checkup within the past year among adults') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Question', 'DataValue', 'StratificationCategory1']]
  checkup_bad = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  checkup_good = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  return checkup_bad, checkup_good

def finish_high_school():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'High school completion among adults aged 18-24') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Topic', 'Question', 'DataValue']]
  finish_hs_bad = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  finish_hs_good = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  return finish_hs_bad, finish_hs_good

def unemployment_rate():
  df = state_filter()
  conditions = (df['Topic'] == 'Social Determinants of Health') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'Unemployment rate among people 16 years and older in the labor force') & \
              (df['StratificationCategory1'] == 'Overall')

  filtered_df = df.loc[conditions, ['YearStart', 'LocationDesc', 'Topic', 'Question', 'DataValue']]
  unemployment_bad = filtered_df.sort_values(by='DataValue').nlargest(5, 'DataValue')
  unemployment_good = filtered_df.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  return unemployment_bad, unemployment_good

def compiled_best_worst():
  checkup_bad, checkup_good = well_visit()
  finish_hs_bad, finish_hs_good = finish_high_school()
  unemployment_bad, unemployment_good = unemployment_rate()
  lack_of_insurance_bad, lack_of_insurance_good = lack_of_insurance()
  unable_to_pay_bad, unable_to_pay_good = unable_to_pay()
  lack_of_support_bad, lack_of_support_good = lack_of_support()
  reliable_transportation_bad, reliable_transportation_good = reliable_transportation()
  food_insecure_bad, food_insecure_good = food_insecure()
  internet_access_bad, internet_access_good = internet_access()
  ins_before_birth_bad, ins_before_birth_good = ins_before_birth()
  ins_after_birth_bad, ins_after_birth_good = ins_after_birth()
  live_below_poverty_bad, live_below_poverty_good = live_below_poverty()

  bad_summary = pd.concat([checkup_bad, finish_hs_bad, unemployment_bad, lack_of_insurance_bad, unable_to_pay_bad,
                      lack_of_support_bad, reliable_transportation_bad, food_insecure_bad, internet_access_bad,
                      ins_before_birth_bad, ins_after_birth_bad, live_below_poverty_bad])

  good_summary = pd.concat([checkup_good, finish_hs_good, unemployment_good, lack_of_insurance_good, unable_to_pay_good,
                       lack_of_support_good, reliable_transportation_good, food_insecure_good, internet_access_good,
                       ins_before_birth_good, ins_after_birth_good, live_below_poverty_good])

  combined_counts_bad = bad_summary['LocationDesc'].value_counts()
  state_counts_good = combined_counts_bad[combined_counts_bad > 2]
  combined_counts_good = good_summary['LocationDesc'].value_counts()
  state_counts_bad = combined_counts_good[combined_counts_good > 2]
  return state_counts_bad, state_counts_good

def get_life_expectancy():
    life_data = pd.read_csv('life_expectancy.csv')
    state_mapping = {
        'AL': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona', 'AR': 'Arkansas', 'CA': 'California',
        'CO': 'Colorado', 'CT': 'Connecticut', 'DE': 'Delaware', 'FL': 'Florida', 'GA': 'Georgia',
        'HI': 'Hawaii', 'ID': 'Idaho', 'IL': 'Illinois', 'IN': 'Indiana', 'IA': 'Iowa', 'KS': 'Kansas',
        'KY': 'Kentucky', 'LA': 'Louisiana', 'ME': 'Maine', 'MD': 'Maryland', 'MA': 'Massachusetts',
        'MI': 'Michigan', 'MN': 'Minnesota', 'MS': 'Mississippi', 'MO': 'Missouri', 'MT': 'Montana',
        'NE': 'Nebraska', 'NV': 'Nevada', 'NH': 'New Hampshire', 'NJ': 'New Jersey', 'NM': 'New Mexico',
        'NY': 'New York', 'NC': 'North Carolina', 'ND': 'North Dakota', 'OH': 'Ohio', 'OK': 'Oklahoma',
        'OR': 'Oregon', 'PA': 'Pennsylvania', 'RI': 'Rhode Island', 'SC': 'South Carolina',
        'SD': 'South Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah', 'VT': 'Vermont',
        'VA': 'Virginia', 'WA': 'Washington', 'WV': 'West Virginia', 'WI': 'Wisconsin', 'WY': 'Wyoming'
    }
    life_data['STATE'] = life_data['STATE'].map(state_mapping)
    life_data = life_data[life_data['YEAR'] == 2019]
    life_data.drop(columns=['URL'], inplace=True)
    life_data_low = life_data.sort_values(by='RATE').nsmallest(5, 'RATE')
    life_data_high = life_data.sort_values(by='RATE').nlargest(5, 'RATE')
    return life_data, life_data_low, life_data_high

def simple_life():
    simple_life_data = pd.read_csv('life_expectancy.csv')
    simple_life_data = simple_life_data[simple_life_data['YEAR'] == 2019]
    simple_life_data.drop(columns=['URL'], inplace=True)
    simple_life_data.drop(columns=['YEAR'], inplace=True)
    return simple_life_data

def disability_rates_simple():
  df = state_filter()
  conditions = (df['Topic'] == 'Disability') & \
              (df['YearStart'] == 2019) & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')
  disability_code = df.loc[conditions, ['LocationAbbr','DataValue']]
  return disability_code

def disability_rates():
  df = state_filter()
  conditions = (df['Topic'] == 'Disability') & \
              (df['YearStart'] == 2019) & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')
  disability_prev = df.loc[conditions, ['LocationDesc','DataValue']]
  disability_bad = disability_prev.sort_values(by='DataValue').nlargest(5, 'DataValue')
  disability_good = disability_prev.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  return disability_bad, disability_good

def diabetes_simple():
  df = state_filter()
  conditions = (df['Topic'] == 'Diabetes') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'Diabetes among adults') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')
  diabetes_simple = df.loc[conditions, ['LocationAbbr','DataValue']]
  return diabetes_simple

def diabetes_rates():
  df = state_filter()
  conditions = (df['Topic'] == 'Diabetes') & \
              (df['YearStart'] == 2019) & \
              (df['Question'] == 'Diabetes among adults') & \
              (df['DataValueType'] == 'Crude Prevalence') & \
              (df['StratificationCategory1'] == 'Overall')
  diabetes = df.loc[conditions, ['LocationDesc','DataValue']]
  diabetes_bad = diabetes.sort_values(by='DataValue').nlargest(5, 'DataValue')
  diabetes_good = diabetes.sort_values(by='DataValue').nsmallest(5, 'DataValue')
  return diabetes_bad, diabetes_good